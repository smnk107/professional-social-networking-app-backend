
services:

  kafka:
    image: docker.io/bitnami/kafka:3.8
    container_name: kafka
    volumes:
      - "kafka_data:/bitnami"
    networks:
      - linkedinNetwork
    environment:
      # KRaft settings
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      # Listeners
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT

  kafbat-ui:
    container_name: kafbat-ui
    image: ghcr.io/kafbat/kafka-ui:latest
    ports:
      - 8090:8080
    depends_on:
      - kafka
    networks:
      - linkedinNetwork
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_KSQLDBSERVER: http://ksqldb0:8088

#
#
  user-db-service:
    image: postgres
    container_name: linkedin-user-db-cont
#    ports:
    environment:
      POSTGRES_DB: user_db
      POSTGRES_USER: smnk107
      POSTGRES_PASSWORD: password
    volumes:
      - user-db-data:/var/lib/postgresql/data
    networks:
      - linkedinNetwork
#
  posts-db-service:
    image: postgres
    container_name: linkedin-posts-db-cont
#    ports:
    environment:
      POSTGRES_DB: posts_db
      POSTGRES_USER: smnk107
      POSTGRES_PASSWORD: password
    volumes:
      - posts-db-data:/var/lib/postgresql/data
    networks:
      - linkedinNetwork


  notification-db-service:
    image: postgres
    container_name: linkedin-notification-db-cont
#    ports:
    environment:
      POSTGRES_DB: notification_db
      POSTGRES_USER: smnk107
      POSTGRES_PASSWORD: password
    volumes:
      - notification-db-data:/var/lib/postgresql/data
    networks:
      - linkedinNetwork


  connections-db-service:
    image: neo4j
    container_name: linkedin-connections-db-cont
    ports:
      - "7474:7474"  # HTTP port
      - "7687:7687"
    environment:
      - NEO4J_AUTH=neo4j/password
    volumes:
      - connections-db-data:/var/lib/postgresql/data
    networks:
      - linkedinNetwork
#
#
  posts-service:
    image: linkedin-posts-service
    container_name: linkedin-posts-cont
#    ports:
#    environment:
    volumes:
      - notification-db-data:/var/lib/postgresql/data
    networks:
      - linkedinNetwork
    depends_on:
      - posts-db-service
      - discovery-service
      - kafka

  notification-service:
    image: linkedin-notification-service
    container_name: linkedin-notification-cont
#    ports:
#    environment:
#    volumes:
    depends_on:
      - kafka
      - discovery-service
      - notification-db-service
    networks:
      - linkedinNetwork

  connections-service:
    image: linkedin-connections-service
    container_name: linkedin-connections-cont
#    ports:
#    environment:
#    volumes:
    networks:
      - linkedinNetwork
    depends_on:
      - connections-db-service
      - discovery-service
      - kafka

  user-service:
    image: linkedin-user-service
    container_name: linkedin-user-cont
    #    ports:
    #    environment:
    #    volumes:
    networks:
      - linkedinNetwork
    depends_on:
      - user-db-service
      - discovery-service
      - kafka

  discovery-service:
    image: linkedin-discovery-service
    container_name: linkedin-discovery-cont
    ports:
      - "8761:9012"

#    environment:
#    volumes:
    networks:
      - linkedinNetwork

#
  api-gateway-service:
    image: linkedin-api-gateway
    container_name: linkedin-api-gateway-cont
    ports:
      - "9013:9013"
#    environment:
#    volumes:
    networks:
      - linkedinNetwork

networks:
  linkedinNetwork:

volumes:
  kafka_data:
  notification-db-data:
  connections-db-data:
  user-db-data:
  posts-db-data:

